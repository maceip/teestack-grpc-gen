// @generated by protobuf-ts 2.9.4 with parameter server_grpc1
// @generated from protobuf file "teestack.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Address } from "./teestack_dep";
/**
 * @generated from protobuf message RevokeResponse
 */
export interface RevokeResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: Status status = 2;
     */
    status: Status;
}
/**
 * @generated from protobuf message EnclaveKeyResponse
 */
export interface EnclaveKeyResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: Status status = 2;
     */
    status: Status;
}
/**
 * @generated from protobuf message RevocationListResponse
 */
export interface RevocationListResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: Status status = 3;
     */
    status: Status;
    /**
     * @generated from protobuf field: map<string, Enclave> enclaves = 4;
     */
    enclaves: {
        [key: string]: Enclave;
    };
}
/**
 * @generated from protobuf message RevokeKeyRequest
 */
export interface RevokeKeyRequest {
    /**
     * @generated from protobuf field: string identity = 1;
     */
    identity: string;
}
/**
 * @generated from protobuf message RevocationListRequest
 */
export interface RevocationListRequest {
    /**
     * @generated from protobuf field: string filter = 1;
     */
    filter: string;
}
/**
 * @generated from protobuf message GetEnclaveKeyRequest
 */
export interface GetEnclaveKeyRequest {
    /**
     * @generated from protobuf field: string eoa_address = 1;
     */
    eoaAddress: string;
}
/**
 * @generated from protobuf message BindtoEnclaveKeyReqest
 */
export interface BindtoEnclaveKeyReqest {
    /**
     * @generated from protobuf field: string bytes = 1;
     */
    bytes: string;
}
/**
 * @generated from protobuf message EnclaveKey
 */
export interface EnclaveKey {
    /**
     * @generated from protobuf field: string cipher = 1;
     */
    cipher: string;
    /**
     * @generated from protobuf field: string public = 2;
     */
    public: string;
    /**
     * @generated from protobuf field: string private = 3;
     */
    private: string;
    /**
     * @generated from protobuf field: int32 expiry = 4;
     */
    expiry: number;
}
/**
 * @generated from protobuf message Enclave
 */
export interface Enclave {
    /**
     * @generated from protobuf field: string tcb = 1;
     */
    tcb: string;
    /**
     * @generated from protobuf field: bool active = 2;
     */
    active: boolean;
    /**
     * @generated from protobuf field: Address address = 3;
     */
    address?: Address;
}
/**
 * @generated from protobuf enum Status
 */
export enum Status {
    /**
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: STATUS_OK = 1;
     */
    OK = 1,
    /**
     * @generated from protobuf enum value: STATUS_ERROR = 2;
     */
    ERROR = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class RevokeResponse$Type extends MessageType<RevokeResponse> {
    constructor() {
        super("RevokeResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["Status", Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<RevokeResponse>): RevokeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<RevokeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokeResponse): RevokeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                case /* Status status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* Status status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevokeResponse
 */
export const RevokeResponse = new RevokeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnclaveKeyResponse$Type extends MessageType<EnclaveKeyResponse> {
    constructor() {
        super("EnclaveKeyResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["Status", Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<EnclaveKeyResponse>): EnclaveKeyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<EnclaveKeyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnclaveKeyResponse): EnclaveKeyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                case /* Status status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnclaveKeyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* Status status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EnclaveKeyResponse
 */
export const EnclaveKeyResponse = new EnclaveKeyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevocationListResponse$Type extends MessageType<RevocationListResponse> {
    constructor() {
        super("RevocationListResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["Status", Status, "STATUS_"] },
            { no: 4, name: "enclaves", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Enclave } }
        ]);
    }
    create(value?: PartialMessage<RevocationListResponse>): RevocationListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        message.status = 0;
        message.enclaves = {};
        if (value !== undefined)
            reflectionMergePartial<RevocationListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevocationListResponse): RevocationListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                case /* Status status */ 3:
                    message.status = reader.int32();
                    break;
                case /* map<string, Enclave> enclaves */ 4:
                    this.binaryReadMap4(message.enclaves, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: RevocationListResponse["enclaves"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof RevocationListResponse["enclaves"] | undefined, val: RevocationListResponse["enclaves"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Enclave.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field RevocationListResponse.enclaves");
            }
        }
        map[key ?? ""] = val ?? Enclave.create();
    }
    internalBinaryWrite(message: RevocationListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* Status status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* map<string, Enclave> enclaves = 4; */
        for (let k of globalThis.Object.keys(message.enclaves)) {
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Enclave.internalBinaryWrite(message.enclaves[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevocationListResponse
 */
export const RevocationListResponse = new RevocationListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokeKeyRequest$Type extends MessageType<RevokeKeyRequest> {
    constructor() {
        super("RevokeKeyRequest", [
            { no: 1, name: "identity", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RevokeKeyRequest>): RevokeKeyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.identity = "";
        if (value !== undefined)
            reflectionMergePartial<RevokeKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokeKeyRequest): RevokeKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string identity */ 1:
                    message.identity = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokeKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string identity = 1; */
        if (message.identity !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.identity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevokeKeyRequest
 */
export const RevokeKeyRequest = new RevokeKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevocationListRequest$Type extends MessageType<RevocationListRequest> {
    constructor() {
        super("RevocationListRequest", [
            { no: 1, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RevocationListRequest>): RevocationListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filter = "";
        if (value !== undefined)
            reflectionMergePartial<RevocationListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevocationListRequest): RevocationListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filter */ 1:
                    message.filter = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevocationListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filter = 1; */
        if (message.filter !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevocationListRequest
 */
export const RevocationListRequest = new RevocationListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEnclaveKeyRequest$Type extends MessageType<GetEnclaveKeyRequest> {
    constructor() {
        super("GetEnclaveKeyRequest", [
            { no: 1, name: "eoa_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetEnclaveKeyRequest>): GetEnclaveKeyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.eoaAddress = "";
        if (value !== undefined)
            reflectionMergePartial<GetEnclaveKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEnclaveKeyRequest): GetEnclaveKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string eoa_address */ 1:
                    message.eoaAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEnclaveKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string eoa_address = 1; */
        if (message.eoaAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.eoaAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetEnclaveKeyRequest
 */
export const GetEnclaveKeyRequest = new GetEnclaveKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BindtoEnclaveKeyReqest$Type extends MessageType<BindtoEnclaveKeyReqest> {
    constructor() {
        super("BindtoEnclaveKeyReqest", [
            { no: 1, name: "bytes", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BindtoEnclaveKeyReqest>): BindtoEnclaveKeyReqest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bytes = "";
        if (value !== undefined)
            reflectionMergePartial<BindtoEnclaveKeyReqest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BindtoEnclaveKeyReqest): BindtoEnclaveKeyReqest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bytes */ 1:
                    message.bytes = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BindtoEnclaveKeyReqest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bytes = 1; */
        if (message.bytes !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BindtoEnclaveKeyReqest
 */
export const BindtoEnclaveKeyReqest = new BindtoEnclaveKeyReqest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnclaveKey$Type extends MessageType<EnclaveKey> {
    constructor() {
        super("EnclaveKey", [
            { no: 1, name: "cipher", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "public", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "private", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "expiry", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnclaveKey>): EnclaveKey {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cipher = "";
        message.public = "";
        message.private = "";
        message.expiry = 0;
        if (value !== undefined)
            reflectionMergePartial<EnclaveKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnclaveKey): EnclaveKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cipher */ 1:
                    message.cipher = reader.string();
                    break;
                case /* string public */ 2:
                    message.public = reader.string();
                    break;
                case /* string private */ 3:
                    message.private = reader.string();
                    break;
                case /* int32 expiry */ 4:
                    message.expiry = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnclaveKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cipher = 1; */
        if (message.cipher !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cipher);
        /* string public = 2; */
        if (message.public !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.public);
        /* string private = 3; */
        if (message.private !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.private);
        /* int32 expiry = 4; */
        if (message.expiry !== 0)
            writer.tag(4, WireType.Varint).int32(message.expiry);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EnclaveKey
 */
export const EnclaveKey = new EnclaveKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Enclave$Type extends MessageType<Enclave> {
    constructor() {
        super("Enclave", [
            { no: 1, name: "tcb", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "address", kind: "message", T: () => Address }
        ]);
    }
    create(value?: PartialMessage<Enclave>): Enclave {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tcb = "";
        message.active = false;
        if (value !== undefined)
            reflectionMergePartial<Enclave>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Enclave): Enclave {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tcb */ 1:
                    message.tcb = reader.string();
                    break;
                case /* bool active */ 2:
                    message.active = reader.bool();
                    break;
                case /* Address address */ 3:
                    message.address = Address.internalBinaryRead(reader, reader.uint32(), options, message.address);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Enclave, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tcb = 1; */
        if (message.tcb !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tcb);
        /* bool active = 2; */
        if (message.active !== false)
            writer.tag(2, WireType.Varint).bool(message.active);
        /* Address address = 3; */
        if (message.address)
            Address.internalBinaryWrite(message.address, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Enclave
 */
export const Enclave = new Enclave$Type();
/**
 * @generated ServiceType for protobuf service KeyManagerService
 */
export const KeyManagerService = new ServiceType("KeyManagerService", [
    { name: "GetEnclaveKey", options: {}, I: GetEnclaveKeyRequest, O: EnclaveKeyResponse },
    { name: "RevokeKey", options: {}, I: RevokeKeyRequest, O: RevokeResponse },
    { name: "GetRevocationList", options: {}, I: RevocationListRequest, O: RevocationListResponse },
    { name: "BindtoEnclaveKey", options: {}, I: BindtoEnclaveKeyReqest, O: EnclaveKey }
]);
