// @generated by protobuf-ts 2.9.4 with parameter server_grpc1
// @generated from protobuf file "teestack_dep.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Key
 */
export interface Key {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message Address
 */
export interface Address {
    /**
     * @generated from protobuf field: string ens = 1;
     */
    ens: string;
    /**
     * @generated from protobuf field: string dns = 2;
     */
    dns: string;
    /**
     * @generated from protobuf field: string chain = 3;
     */
    chain: string;
}
/**
 * @generated from protobuf message x509
 */
export interface x509 {
    /**
     * @generated from protobuf field: string ens = 1;
     */
    ens: string;
    /**
     * @generated from protobuf field: string rootca = 2;
     */
    rootca: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Key$Type extends MessageType<Key> {
    constructor() {
        super("Key", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Key>): Key {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<Key>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Key): Key {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Key, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Key
 */
export const Key = new Key$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Address$Type extends MessageType<Address> {
    constructor() {
        super("Address", [
            { no: 1, name: "ens", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "dns", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Address>): Address {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ens = "";
        message.dns = "";
        message.chain = "";
        if (value !== undefined)
            reflectionMergePartial<Address>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Address): Address {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ens */ 1:
                    message.ens = reader.string();
                    break;
                case /* string dns */ 2:
                    message.dns = reader.string();
                    break;
                case /* string chain */ 3:
                    message.chain = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Address, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ens = 1; */
        if (message.ens !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ens);
        /* string dns = 2; */
        if (message.dns !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dns);
        /* string chain = 3; */
        if (message.chain !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.chain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Address
 */
export const Address = new Address$Type();
// @generated message type with reflection information, may provide speed optimized methods
class x509$Type extends MessageType<x509> {
    constructor() {
        super("x509", [
            { no: 1, name: "ens", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rootca", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<x509>): x509 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ens = "";
        message.rootca = "";
        if (value !== undefined)
            reflectionMergePartial<x509>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: x509): x509 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ens */ 1:
                    message.ens = reader.string();
                    break;
                case /* string rootca */ 2:
                    message.rootca = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: x509, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ens = 1; */
        if (message.ens !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ens);
        /* string rootca = 2; */
        if (message.rootca !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rootca);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message x509
 */
export const x509 = new x509$Type();
