// @generated by protobuf-ts 2.9.4 with parameter server_grpc1
// @generated from protobuf file "teestack.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { KeyManagerService } from "./teestack";
import type { EnclaveKey } from "./teestack";
import type { BindtoEnclaveKeyReqest } from "./teestack";
import type { RevocationListResponse } from "./teestack";
import type { RevocationListRequest } from "./teestack";
import type { RevokeResponse } from "./teestack";
import type { RevokeKeyRequest } from "./teestack";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { EnclaveKeyResponse } from "./teestack";
import type { GetEnclaveKeyRequest } from "./teestack";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service KeyManagerService
 */
export interface IKeyManagerServiceClient {
    /**
     * @generated from protobuf rpc: GetEnclaveKey(GetEnclaveKeyRequest) returns (EnclaveKeyResponse);
     */
    getEnclaveKey(input: GetEnclaveKeyRequest, options?: RpcOptions): UnaryCall<GetEnclaveKeyRequest, EnclaveKeyResponse>;
    /**
     * @generated from protobuf rpc: RevokeKey(RevokeKeyRequest) returns (RevokeResponse);
     */
    revokeKey(input: RevokeKeyRequest, options?: RpcOptions): UnaryCall<RevokeKeyRequest, RevokeResponse>;
    /**
     * @generated from protobuf rpc: GetRevocationList(RevocationListRequest) returns (RevocationListResponse);
     */
    getRevocationList(input: RevocationListRequest, options?: RpcOptions): UnaryCall<RevocationListRequest, RevocationListResponse>;
    /**
     * @generated from protobuf rpc: BindtoEnclaveKey(BindtoEnclaveKeyReqest) returns (EnclaveKey);
     */
    bindtoEnclaveKey(input: BindtoEnclaveKeyReqest, options?: RpcOptions): UnaryCall<BindtoEnclaveKeyReqest, EnclaveKey>;
}
/**
 * @generated from protobuf service KeyManagerService
 */
export class KeyManagerServiceClient implements IKeyManagerServiceClient, ServiceInfo {
    typeName = KeyManagerService.typeName;
    methods = KeyManagerService.methods;
    options = KeyManagerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetEnclaveKey(GetEnclaveKeyRequest) returns (EnclaveKeyResponse);
     */
    getEnclaveKey(input: GetEnclaveKeyRequest, options?: RpcOptions): UnaryCall<GetEnclaveKeyRequest, EnclaveKeyResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEnclaveKeyRequest, EnclaveKeyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RevokeKey(RevokeKeyRequest) returns (RevokeResponse);
     */
    revokeKey(input: RevokeKeyRequest, options?: RpcOptions): UnaryCall<RevokeKeyRequest, RevokeResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevokeKeyRequest, RevokeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRevocationList(RevocationListRequest) returns (RevocationListResponse);
     */
    getRevocationList(input: RevocationListRequest, options?: RpcOptions): UnaryCall<RevocationListRequest, RevocationListResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevocationListRequest, RevocationListResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BindtoEnclaveKey(BindtoEnclaveKeyReqest) returns (EnclaveKey);
     */
    bindtoEnclaveKey(input: BindtoEnclaveKeyReqest, options?: RpcOptions): UnaryCall<BindtoEnclaveKeyReqest, EnclaveKey> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<BindtoEnclaveKeyReqest, EnclaveKey>("unary", this._transport, method, opt, input);
    }
}
